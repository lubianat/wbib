{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"wbib A package for rendering customized Wikidata-based science dashboards. Inspired by Scholia . Powered by Wikidata .","title":"Home"},{"location":"#wbib","text":"A package for rendering customized Wikidata-based science dashboards. Inspired by Scholia . Powered by Wikidata .","title":"wbib"},{"location":"about/","text":"About wbib is an open project for integrating scholarly visualization via Wikidata in python. Note: queries might change from version to version while they get improved. New queries that inherit an old name will aim at conveying the same information as previously, but better formatted. Project is inspired and builds upon queries and dashboards by Scholia .","title":"About"},{"location":"about/#about","text":"wbib is an open project for integrating scholarly visualization via Wikidata in python. Note: queries might change from version to version while they get improved. New queries that inherit an old name will aim at conveying the same information as previously, but better formatted. Project is inspired and builds upon queries and dashboards by Scholia .","title":"About"},{"location":"authors/","text":"Credits Development Lead Tiago Lubiana ( lubianat ) Contributors Jo\u00e3o Vitor Ferreira Cavalcante ( jvfe )","title":"Contributors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Tiago Lubiana ( lubianat )","title":"Development Lead"},{"location":"authors/#contributors","text":"Jo\u00e3o Vitor Ferreira Cavalcante ( jvfe )","title":"Contributors"},{"location":"contributing/","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions Report Bugs Report bugs at https://github.com/lubianat/wbib/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation Wikidata Bib could always use more documentation, whether as part of the official Wikidata Bib docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback The best way to send feedback is to file an issue at https://github.com/lubianat/wbib/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! Ready to contribute? Here's how to set up wbib for local development. Fork the wbib repo on GitHub. Clone your fork locally:: $ git clone git@github.com:your_name_here/wbib.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development:: $ mkvirtualenv wbib $ cd wbib/ $ python setup.py develop Create a branch for local development:: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox:: $ flake8 wbib tests $ python setup.py test or pytest $ tox To get flake8 and tox, just pip install them into your virtualenv. Commit your changes and push your branch to GitHub:: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and for PyPy. Check https://travis-ci.com/lubianat/wbib/pull_requests and make sure that the tests pass for all supported Python versions. Tips To run a subset of tests:: $ python -m unittest tests.test_wbib Deploying A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.rst). Then run:: $ bump2version patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Contribution guide"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/lubianat/wbib/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Wikidata Bib could always use more documentation, whether as part of the official Wikidata Bib docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/lubianat/wbib/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up wbib for local development. Fork the wbib repo on GitHub. Clone your fork locally:: $ git clone git@github.com:your_name_here/wbib.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development:: $ mkvirtualenv wbib $ cd wbib/ $ python setup.py develop Create a branch for local development:: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox:: $ flake8 wbib tests $ python setup.py test or pytest $ tox To get flake8 and tox, just pip install them into your virtualenv. Commit your changes and push your branch to GitHub:: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and for PyPy. Check https://travis-ci.com/lubianat/wbib/pull_requests and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"To run a subset of tests:: $ python -m unittest tests.test_wbib","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.rst). Then run:: $ bump2version patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History 0.3.4 (2021-05-12) Patch: Load Jinja2 template and add Jinja2 as requirement 0.3.0 (2021-05-11) Change code to use jinja2 templating for rendering html (contribution by @jvfe). 0.2.0 (2021-05-07) Set up \"advanced\" mode, with yaml template for restricting the query. 0.1.0 (2021-04-19) First release on PyPI.","title":"History"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#034-2021-05-12","text":"Patch: Load Jinja2 template and add Jinja2 as requirement","title":"0.3.4 (2021-05-12)"},{"location":"history/#030-2021-05-11","text":"Change code to use jinja2 templating for rendering html (contribution by @jvfe).","title":"0.3.0 (2021-05-11)"},{"location":"history/#020-2021-05-07","text":"Set up \"advanced\" mode, with yaml template for restricting the query.","title":"0.2.0 (2021-05-07)"},{"location":"history/#010-2021-04-19","text":"First release on PyPI.","title":"0.1.0 (2021-04-19)"},{"location":"installation/","text":"Installation Stable release To install wbib, run this command in your terminal: $ pip install wbib This is the preferred method to install wbib, as it will always install the most recent stable release. From sources The sources for wbib can be downloaded from the Github repo. You can either clone the public repository: $ git clone git://github.com/lubianat/wbib Or download the tarball: $ curl -OJL https://github.com/lubianat/wbib/tarball/master Once you have a copy of the source, you can install it with: $ python setup.py install","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install wbib, run this command in your terminal: $ pip install wbib This is the preferred method to install wbib, as it will always install the most recent stable release.","title":"Stable release"},{"location":"installation/#from-sources","text":"The sources for wbib can be downloaded from the Github repo. You can either clone the public repository: $ git clone git://github.com/lubianat/wbib Or download the tarball: $ curl -OJL https://github.com/lubianat/wbib/tarball/master Once you have a copy of the source, you can install it with: $ python setup.py install","title":"From sources"},{"location":"examples/advanced/","text":"Advanced usage: from wbib import wbib from yaml import yaml Render dashboard from an yaml configuration First, set up an yaml file with the content of the page. An example file is available here The structure of the yaml is like this: title: Advanced Wikidata Bib subtitle: > Advanced mode of Wikidata Bib restriction: # - Remove all options for no restriction # (you can also remove this section and edit the query directly on queries.py) # Categories are united by AND (i.e. will need to match both author area and institution region) # Qids inside categoy are united by OR(i.e. will select works that match any of the listed topics) author_area: # - Q12149006 # Metabolomics topic_of_work: # - Q12174 # Example: Obesity institution_region: # - Q12585 # Example: Latin America (works for countries and beyond) gender: # - Q6581072 # Female event: # - Q106587263 # 1st Human Cell Atlas Latin America Single Cell RNA-seqData Analysis Workshop author_is_topic_of: - Q106757464 # Science Super-Heroes: 52 Brazilians and their transformative research sections: # Comment out to remove from dashboard; # Change the order to change the order on the dashboard - articles - map of institutions - list of authors - list of topics - list of journals - curation of author items - curation of author affiliations license_statement: > This content is available under a <a target=\"_blank\" href=\"https://creativecommons.org/publicdomain/zero/1.0/\"> Creative Commons CC0</a> license. </a> scholia_credit: > SPARQL queries adapted from <a target=\"_blank\" href=\"https://scholia.toolforge.org/\">Scholia</a> creator_credit: > Dashboard generated via <a target=\"_blank\" href=\"https://pypi.org/project/wbib/\">Wikidata Bib</a> once the file is set, it can serve as an input for the render_dashboard function: with open(\"config.yaml\") as f: config = yaml.load(f, Loader=yaml.FullLoader) html = wbib.render_dashboard(config, mode=\"advanced\", filepath=\"dashboard.html\") See the results here .","title":"Advanced"},{"location":"examples/advanced/#advanced-usage","text":"from wbib import wbib from yaml import yaml","title":"Advanced usage:"},{"location":"examples/advanced/#render-dashboard-from-an-yaml-configuration","text":"First, set up an yaml file with the content of the page. An example file is available here The structure of the yaml is like this: title: Advanced Wikidata Bib subtitle: > Advanced mode of Wikidata Bib restriction: # - Remove all options for no restriction # (you can also remove this section and edit the query directly on queries.py) # Categories are united by AND (i.e. will need to match both author area and institution region) # Qids inside categoy are united by OR(i.e. will select works that match any of the listed topics) author_area: # - Q12149006 # Metabolomics topic_of_work: # - Q12174 # Example: Obesity institution_region: # - Q12585 # Example: Latin America (works for countries and beyond) gender: # - Q6581072 # Female event: # - Q106587263 # 1st Human Cell Atlas Latin America Single Cell RNA-seqData Analysis Workshop author_is_topic_of: - Q106757464 # Science Super-Heroes: 52 Brazilians and their transformative research sections: # Comment out to remove from dashboard; # Change the order to change the order on the dashboard - articles - map of institutions - list of authors - list of topics - list of journals - curation of author items - curation of author affiliations license_statement: > This content is available under a <a target=\"_blank\" href=\"https://creativecommons.org/publicdomain/zero/1.0/\"> Creative Commons CC0</a> license. </a> scholia_credit: > SPARQL queries adapted from <a target=\"_blank\" href=\"https://scholia.toolforge.org/\">Scholia</a> creator_credit: > Dashboard generated via <a target=\"_blank\" href=\"https://pypi.org/project/wbib/\">Wikidata Bib</a> once the file is set, it can serve as an input for the render_dashboard function: with open(\"config.yaml\") as f: config = yaml.load(f, Loader=yaml.FullLoader) html = wbib.render_dashboard(config, mode=\"advanced\", filepath=\"dashboard.html\") See the results here .","title":"Render dashboard from an yaml configuration"},{"location":"examples/basic/","text":"Basic usage: from wbib import wbib Generate list of QIDs from a list of DOIs dois = [\"10.3897/RIO.2.E9342\", \"10.3389/fimmu.2019.02736\", \"wrong or missing DOI\"] qids = wbib.convert_doi_to_qid(dois) print(qids) The output: {'missing': {'\"wrong or missing DOI\"'}, 'qids': {'Q92072015', 'Q61654697'}} Render dashboard from a list of QIDs qids = [\"Q35185544\", \"Q34555562\", \"Q21284234\"] html = wbib.render_dashboard(info=qids, mode=\"basic\", filepath=\"dashboard.html\") See results here","title":"Basic"},{"location":"examples/basic/#basic-usage","text":"from wbib import wbib","title":"Basic usage:"},{"location":"examples/basic/#generate-list-of-qids-from-a-list-of-dois","text":"dois = [\"10.3897/RIO.2.E9342\", \"10.3389/fimmu.2019.02736\", \"wrong or missing DOI\"] qids = wbib.convert_doi_to_qid(dois) print(qids) The output: {'missing': {'\"wrong or missing DOI\"'}, 'qids': {'Q92072015', 'Q61654697'}}","title":"Generate list of QIDs from a list of DOIs"},{"location":"examples/basic/#render-dashboard-from-a-list-of-qids","text":"qids = [\"Q35185544\", \"Q34555562\", \"Q21284234\"] html = wbib.render_dashboard(info=qids, mode=\"basic\", filepath=\"dashboard.html\") See results here","title":"Render dashboard from a list of QIDs"},{"location":"reference/wbib/","text":"wbib.wbib A set of core functions that may be called from wbib. Other modules will contain the specific queries and auxiliary functions. Typical usage example: qids = [\"Q35185544\", \"Q34555562\", \"Q21284234\"] render_dashboard(info=qids, mode=\"basic\") render_dashboard() Renders a plain html string coding for a dashboard with embedded Wikidata SPARQL queries. At the same time, it saves the html to the file system via the filepath argument. DEFAULT_SESSIONS = [ \"map of institutions\", \"articles\", \"list of authors\", \"list of topics\", \"list of journals\", \"curation of author items\", \"curation of author affiliations\", ] DEFAULT_QUERY_OPTIONS = { \"map of institutions\": { \"label\": \"map of institutions\", \"query\": wbib.queries.get_query_url_for_locations }, \"articles\": { \"label\": \"articles\", \"query\": wbib.queries.get_query_url_for_articles }, \"list of authors\": { \"label\": \"list of authors\", \"query\": wbib.queries.get_query_url_for_authors }, \"list of topics\": { \"label\": \"list of co-studied topics\", \"query\": wbib.queries.get_topics_as_table }, \"list of journals\": { \"label\": \"list of venues\", \"query\": wbib.queries.get_query_url_for_venues }, \"curation of author items\": { \"label\": \"curation: curate author strings that are not yet linked to items\", \"query\": wbib.queries.get_query_url_for_missing_author_items }, \"curation of author affiliations\": { \"label\": \"curation: add affiliation/employment for authors lacking it\", \"query\": queries.get_query_url_for_author_without_affiliation } } EXAMPLE_PAGES = {\"home\": {\"href\": \"/\", \"name\": \"Home\"}} Parameters: info ( dict ) \u2013 Either a dict containing complex information for the selector or a list of QIDs. mode ( str ) \u2013 A string representing the mode. If \"advanced\", then a config is expected for the info parameters. If \"basic\", a list of QIDs is expected. Defaults to \"advanced\". query_options ( dict ) \u2013 A set of queries that might be used by the dashboard. See default for customizing queries or labels. sections_to_add ( list ) \u2013 Names of the queries to be included in the dashboard. Standard is to include all. site_title ( str ) \u2013 A title for the dashboard (if in \"basic\" mode) site_subtitle ( str ) \u2013 A subtitle for the dashboard (if in \"basic\" mode) filepath ( str ) \u2013 The filepath to write the dashboard to. pages ( dict ) \u2013 The pages that will be part of the final dashboard, as to make a simple navbar. Returns: str \u2013 The html content for a static Wikidata-based dashboard. Note: also saves the file to the file system. Source code in wbib/wbib.py def render_dashboard ( info , mode = \"basic\" , query_options = DEFAULT_QUERY_OPTIONS , sections_to_add = DEFAULT_SESSIONS , site_title = \"Wikidata Bibtex\" , site_subtitle = \"Demonstration\" , filepath = \".\" , pages = {}, ): \"\"\" Renders a plain html string coding for a dashboard with embedded Wikidata SPARQL queries. At the same time, it saves the html to the file system via the filepath argument. ``` DEFAULT_SESSIONS = [ \"map of institutions\", \"articles\", \"list of authors\", \"list of topics\", \"list of journals\", \"curation of author items\", \"curation of author affiliations\", ] ``` ``` DEFAULT_QUERY_OPTIONS = { \"map of institutions\": { \"label\": \"map of institutions\", \"query\": wbib.queries.get_query_url_for_locations }, \"articles\": { \"label\": \"articles\", \"query\": wbib.queries.get_query_url_for_articles }, \"list of authors\": { \"label\": \"list of authors\", \"query\": wbib.queries.get_query_url_for_authors }, \"list of topics\": { \"label\": \"list of co-studied topics\", \"query\": wbib.queries.get_topics_as_table }, \"list of journals\": { \"label\": \"list of venues\", \"query\": wbib.queries.get_query_url_for_venues }, \"curation of author items\": { \"label\": \"curation: curate author strings that are not yet linked to items\", \"query\": wbib.queries.get_query_url_for_missing_author_items }, \"curation of author affiliations\": { \"label\": \"curation: add affiliation/employment for authors lacking it\", \"query\": queries.get_query_url_for_author_without_affiliation } } ``` ``` EXAMPLE_PAGES = {\"home\": {\"href\": \"/\", \"name\": \"Home\"}} ``` Args: info (dict): Either a dict containing complex information for the selector or a list of QIDs. mode (str): A string representing the mode. If \"advanced\", then a config is expected for the info parameters. If \"basic\", a list of QIDs is expected. Defaults to \"advanced\". query_options (dict): A set of queries that might be used by the dashboard. See default for customizing queries or labels. sections_to_add (list): Names of the queries to be included in the dashboard. Standard is to include all. site_title (str): A title for the dashboard (if in \"basic\" mode) site_subtitle (str): A subtitle for the dashboard (if in \"basic\" mode) filepath (str): The filepath to write the dashboard to. pages (dict): The pages that will be part of the final dashboard, as to make a simple navbar. Returns: str: The html content for a static Wikidata-based dashboard. Note: also saves the file to the file system. \"\"\" if mode == \"advanced\" : if not isinstance ( info , dict ): raise TypeError ( \"In advanced mode, 'info' needs to be a dict obtained from the standard yaml file\" ) else : license_statement = info [ \"license_statement\" ] scholia_credit_statement = info [ \"scholia_credit\" ] creator_statement = info [ \"creator_credit\" ] site_title = info [ \"title\" ] site_subtitle = info [ \"subtitle\" ] sections_to_add = info [ \"sections\" ] if mode == \"basic\" : license_statement = \"\"\" This content is available under a <a target=\"_blank\" href=\"https://creativecommons.org/publicdomain/zero/1.0/\"> Creative Commons CC0</a> license. \"\"\" scholia_credit_statement = \"\"\" SPARQL queries adapted from <a target=\"_blank\" href=\"https://scholia.toolforge.org/\">Scholia</a> \"\"\" creator_statement = \"\"\" Dashboard generated via <a target=\"_blank\" href=\"https://pypi.org/project/wbib/\">Wikidata Bib</a> \"\"\" sections = render . render_sections ( sections_to_add , query_options , info , mode ) template = env . get_template ( \"template.html.jinja\" ) rendered_template = template . render ( site_title = site_title , site_subtitle = site_subtitle , sections = sections , license_statement = license_statement , scholia_credit = scholia_credit_statement , creator_statement = creator_statement , pages = pages , ) filename = \" {} .html\" . format ( site_title . lower () . strip () . replace ( \" \" , \"_\" )) path_to_write = ( Path ( filepath ) . joinpath ( filename ) if filepath is \".\" else Path ( filepath ) ) with open ( path_to_write , \"w\" ) as html : html . write ( rendered_template ) return rendered_template convert_doi_to_qid() Converts a list of DOI ids to Wikidata QIDs. Parameters: list_of_dois ( list ) \u2013 DOIs without prefix. For example: [\"10.3897/RIO.2.E9342\", \"10.3389/fimmu.2019.02736\"] Returns: dict \u2013 A dict with two key-value pairs. The \"missing\" key contains a set with the DOIs not found, the \"qids\" key contain a set with the QIDs found on Wikidata. Source code in wbib/wbib.py def convert_doi_to_qid ( list_of_dois ): \"\"\" Converts a list of DOI ids to Wikidata QIDs. Args: list_of_dois (list): DOIs without prefix. For example: [\"10.3897/RIO.2.E9342\", \"10.3389/fimmu.2019.02736\"] Returns: dict: A dict with two key-value pairs. The \"missing\" key contains a set with the DOIs not found, the \"qids\" key contain a set with the QIDs found on Wikidata. \"\"\" formatted_dois = '{ \"' + '\" \"' . join ( list_of_dois ) + '\"}' query = f \"\"\"SELECT ?id ?item ?itemLabel WHERE {{ {{ SELECT ?item ?id WHERE {{ VALUES ?unformatted_id { formatted_dois } BIND(UCASE(?unformatted_id) AS ?id) ?item wdt:P356 ?id. }} }} SERVICE wikibase:label {{ bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }}}} \"\"\" query_result = wikidata2df ( query ) result = {} result [ \"qids\" ] = list ( query_result [ \"item\" ] . values ) result [ \"missing\" ] = [] for doi in list_of_dois : if doi . upper () not in list ( query_result [ \"id\" ] . values ): result [ \"missing\" ] . append ( doi ) result [ \"qids\" ] = set ( result [ \"qids\" ]) result [ \"missing\" ] = set ( result [ \"missing\" ]) return result","title":"Main module"},{"location":"reference/wbib/#wbibwbib","text":"A set of core functions that may be called from wbib. Other modules will contain the specific queries and auxiliary functions. Typical usage example: qids = [\"Q35185544\", \"Q34555562\", \"Q21284234\"] render_dashboard(info=qids, mode=\"basic\") render_dashboard() Renders a plain html string coding for a dashboard with embedded Wikidata SPARQL queries. At the same time, it saves the html to the file system via the filepath argument. DEFAULT_SESSIONS = [ \"map of institutions\", \"articles\", \"list of authors\", \"list of topics\", \"list of journals\", \"curation of author items\", \"curation of author affiliations\", ] DEFAULT_QUERY_OPTIONS = { \"map of institutions\": { \"label\": \"map of institutions\", \"query\": wbib.queries.get_query_url_for_locations }, \"articles\": { \"label\": \"articles\", \"query\": wbib.queries.get_query_url_for_articles }, \"list of authors\": { \"label\": \"list of authors\", \"query\": wbib.queries.get_query_url_for_authors }, \"list of topics\": { \"label\": \"list of co-studied topics\", \"query\": wbib.queries.get_topics_as_table }, \"list of journals\": { \"label\": \"list of venues\", \"query\": wbib.queries.get_query_url_for_venues }, \"curation of author items\": { \"label\": \"curation: curate author strings that are not yet linked to items\", \"query\": wbib.queries.get_query_url_for_missing_author_items }, \"curation of author affiliations\": { \"label\": \"curation: add affiliation/employment for authors lacking it\", \"query\": queries.get_query_url_for_author_without_affiliation } } EXAMPLE_PAGES = {\"home\": {\"href\": \"/\", \"name\": \"Home\"}} Parameters: info ( dict ) \u2013 Either a dict containing complex information for the selector or a list of QIDs. mode ( str ) \u2013 A string representing the mode. If \"advanced\", then a config is expected for the info parameters. If \"basic\", a list of QIDs is expected. Defaults to \"advanced\". query_options ( dict ) \u2013 A set of queries that might be used by the dashboard. See default for customizing queries or labels. sections_to_add ( list ) \u2013 Names of the queries to be included in the dashboard. Standard is to include all. site_title ( str ) \u2013 A title for the dashboard (if in \"basic\" mode) site_subtitle ( str ) \u2013 A subtitle for the dashboard (if in \"basic\" mode) filepath ( str ) \u2013 The filepath to write the dashboard to. pages ( dict ) \u2013 The pages that will be part of the final dashboard, as to make a simple navbar. Returns: str \u2013 The html content for a static Wikidata-based dashboard. Note: also saves the file to the file system. Source code in wbib/wbib.py def render_dashboard ( info , mode = \"basic\" , query_options = DEFAULT_QUERY_OPTIONS , sections_to_add = DEFAULT_SESSIONS , site_title = \"Wikidata Bibtex\" , site_subtitle = \"Demonstration\" , filepath = \".\" , pages = {}, ): \"\"\" Renders a plain html string coding for a dashboard with embedded Wikidata SPARQL queries. At the same time, it saves the html to the file system via the filepath argument. ``` DEFAULT_SESSIONS = [ \"map of institutions\", \"articles\", \"list of authors\", \"list of topics\", \"list of journals\", \"curation of author items\", \"curation of author affiliations\", ] ``` ``` DEFAULT_QUERY_OPTIONS = { \"map of institutions\": { \"label\": \"map of institutions\", \"query\": wbib.queries.get_query_url_for_locations }, \"articles\": { \"label\": \"articles\", \"query\": wbib.queries.get_query_url_for_articles }, \"list of authors\": { \"label\": \"list of authors\", \"query\": wbib.queries.get_query_url_for_authors }, \"list of topics\": { \"label\": \"list of co-studied topics\", \"query\": wbib.queries.get_topics_as_table }, \"list of journals\": { \"label\": \"list of venues\", \"query\": wbib.queries.get_query_url_for_venues }, \"curation of author items\": { \"label\": \"curation: curate author strings that are not yet linked to items\", \"query\": wbib.queries.get_query_url_for_missing_author_items }, \"curation of author affiliations\": { \"label\": \"curation: add affiliation/employment for authors lacking it\", \"query\": queries.get_query_url_for_author_without_affiliation } } ``` ``` EXAMPLE_PAGES = {\"home\": {\"href\": \"/\", \"name\": \"Home\"}} ``` Args: info (dict): Either a dict containing complex information for the selector or a list of QIDs. mode (str): A string representing the mode. If \"advanced\", then a config is expected for the info parameters. If \"basic\", a list of QIDs is expected. Defaults to \"advanced\". query_options (dict): A set of queries that might be used by the dashboard. See default for customizing queries or labels. sections_to_add (list): Names of the queries to be included in the dashboard. Standard is to include all. site_title (str): A title for the dashboard (if in \"basic\" mode) site_subtitle (str): A subtitle for the dashboard (if in \"basic\" mode) filepath (str): The filepath to write the dashboard to. pages (dict): The pages that will be part of the final dashboard, as to make a simple navbar. Returns: str: The html content for a static Wikidata-based dashboard. Note: also saves the file to the file system. \"\"\" if mode == \"advanced\" : if not isinstance ( info , dict ): raise TypeError ( \"In advanced mode, 'info' needs to be a dict obtained from the standard yaml file\" ) else : license_statement = info [ \"license_statement\" ] scholia_credit_statement = info [ \"scholia_credit\" ] creator_statement = info [ \"creator_credit\" ] site_title = info [ \"title\" ] site_subtitle = info [ \"subtitle\" ] sections_to_add = info [ \"sections\" ] if mode == \"basic\" : license_statement = \"\"\" This content is available under a <a target=\"_blank\" href=\"https://creativecommons.org/publicdomain/zero/1.0/\"> Creative Commons CC0</a> license. \"\"\" scholia_credit_statement = \"\"\" SPARQL queries adapted from <a target=\"_blank\" href=\"https://scholia.toolforge.org/\">Scholia</a> \"\"\" creator_statement = \"\"\" Dashboard generated via <a target=\"_blank\" href=\"https://pypi.org/project/wbib/\">Wikidata Bib</a> \"\"\" sections = render . render_sections ( sections_to_add , query_options , info , mode ) template = env . get_template ( \"template.html.jinja\" ) rendered_template = template . render ( site_title = site_title , site_subtitle = site_subtitle , sections = sections , license_statement = license_statement , scholia_credit = scholia_credit_statement , creator_statement = creator_statement , pages = pages , ) filename = \" {} .html\" . format ( site_title . lower () . strip () . replace ( \" \" , \"_\" )) path_to_write = ( Path ( filepath ) . joinpath ( filename ) if filepath is \".\" else Path ( filepath ) ) with open ( path_to_write , \"w\" ) as html : html . write ( rendered_template ) return rendered_template convert_doi_to_qid() Converts a list of DOI ids to Wikidata QIDs. Parameters: list_of_dois ( list ) \u2013 DOIs without prefix. For example: [\"10.3897/RIO.2.E9342\", \"10.3389/fimmu.2019.02736\"] Returns: dict \u2013 A dict with two key-value pairs. The \"missing\" key contains a set with the DOIs not found, the \"qids\" key contain a set with the QIDs found on Wikidata. Source code in wbib/wbib.py def convert_doi_to_qid ( list_of_dois ): \"\"\" Converts a list of DOI ids to Wikidata QIDs. Args: list_of_dois (list): DOIs without prefix. For example: [\"10.3897/RIO.2.E9342\", \"10.3389/fimmu.2019.02736\"] Returns: dict: A dict with two key-value pairs. The \"missing\" key contains a set with the DOIs not found, the \"qids\" key contain a set with the QIDs found on Wikidata. \"\"\" formatted_dois = '{ \"' + '\" \"' . join ( list_of_dois ) + '\"}' query = f \"\"\"SELECT ?id ?item ?itemLabel WHERE {{ {{ SELECT ?item ?id WHERE {{ VALUES ?unformatted_id { formatted_dois } BIND(UCASE(?unformatted_id) AS ?id) ?item wdt:P356 ?id. }} }} SERVICE wikibase:label {{ bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }}}} \"\"\" query_result = wikidata2df ( query ) result = {} result [ \"qids\" ] = list ( query_result [ \"item\" ] . values ) result [ \"missing\" ] = [] for doi in list_of_dois : if doi . upper () not in list ( query_result [ \"id\" ] . values ): result [ \"missing\" ] . append ( doi ) result [ \"qids\" ] = set ( result [ \"qids\" ]) result [ \"missing\" ] = set ( result [ \"missing\" ]) return result","title":"wbib.wbib"}]}